//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof Kraken === 'undefined') {
  Kraken = {};
}
Kraken.ArticleSource = module.exports.ArticleSource = function(args) {
  this.Id = null;
  this.Name = null;
  this.Url = null;
  if (args) {
    if (args.Id !== undefined) {
      this.Id = args.Id;
    }
    if (args.Name !== undefined) {
      this.Name = args.Name;
    }
    if (args.Url !== undefined) {
      this.Url = args.Url;
    }
  }
};
Kraken.ArticleSource.prototype = {};
Kraken.ArticleSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Kraken.ArticleSource.prototype.write = function(output) {
  output.writeStructBegin('ArticleSource');
  if (this.Id !== null && this.Id !== undefined) {
    output.writeFieldBegin('Id', Thrift.Type.STRING, 1);
    output.writeString(this.Id);
    output.writeFieldEnd();
  }
  if (this.Name !== null && this.Name !== undefined) {
    output.writeFieldBegin('Name', Thrift.Type.STRING, 2);
    output.writeString(this.Name);
    output.writeFieldEnd();
  }
  if (this.Url !== null && this.Url !== undefined) {
    output.writeFieldBegin('Url', Thrift.Type.STRING, 3);
    output.writeString(this.Url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Kraken.ImportedDocument = module.exports.ImportedDocument = function(args) {
  this.ArticleSourceId = null;
  this.Type = null;
  this.Id = null;
  this.SourceUrl = null;
  this.ImportDateTime = null;
  this.DocumentContent = null;
  if (args) {
    if (args.ArticleSourceId !== undefined) {
      this.ArticleSourceId = args.ArticleSourceId;
    }
    if (args.Type !== undefined) {
      this.Type = args.Type;
    }
    if (args.Id !== undefined) {
      this.Id = args.Id;
    }
    if (args.SourceUrl !== undefined) {
      this.SourceUrl = args.SourceUrl;
    }
    if (args.ImportDateTime !== undefined) {
      this.ImportDateTime = args.ImportDateTime;
    }
    if (args.DocumentContent !== undefined) {
      this.DocumentContent = args.DocumentContent;
    }
  }
};
Kraken.ImportedDocument.prototype = {};
Kraken.ImportedDocument.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ArticleSourceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.SourceUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ImportDateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.DocumentContent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Kraken.ImportedDocument.prototype.write = function(output) {
  output.writeStructBegin('ImportedDocument');
  if (this.ArticleSourceId !== null && this.ArticleSourceId !== undefined) {
    output.writeFieldBegin('ArticleSourceId', Thrift.Type.STRING, 1);
    output.writeString(this.ArticleSourceId);
    output.writeFieldEnd();
  }
  if (this.Type !== null && this.Type !== undefined) {
    output.writeFieldBegin('Type', Thrift.Type.STRING, 2);
    output.writeString(this.Type);
    output.writeFieldEnd();
  }
  if (this.Id !== null && this.Id !== undefined) {
    output.writeFieldBegin('Id', Thrift.Type.STRING, 3);
    output.writeString(this.Id);
    output.writeFieldEnd();
  }
  if (this.SourceUrl !== null && this.SourceUrl !== undefined) {
    output.writeFieldBegin('SourceUrl', Thrift.Type.STRING, 4);
    output.writeString(this.SourceUrl);
    output.writeFieldEnd();
  }
  if (this.ImportDateTime !== null && this.ImportDateTime !== undefined) {
    output.writeFieldBegin('ImportDateTime', Thrift.Type.STRING, 5);
    output.writeString(this.ImportDateTime);
    output.writeFieldEnd();
  }
  if (this.DocumentContent !== null && this.DocumentContent !== undefined) {
    output.writeFieldBegin('DocumentContent', Thrift.Type.STRING, 6);
    output.writeString(this.DocumentContent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Kraken.InvalidArticleSourceIdNotFound = module.exports.InvalidArticleSourceIdNotFound = function(args) {
  Thrift.TException.call(this, "Kraken.InvalidArticleSourceIdNotFound")
  this.name = "Kraken.InvalidArticleSourceIdNotFound"
  this.errorCode = null;
  this.message = null;
  this.ArticleSourceId = null;
  if (args) {
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.ArticleSourceId !== undefined) {
      this.ArticleSourceId = args.ArticleSourceId;
    }
  }
};
Thrift.inherits(Kraken.InvalidArticleSourceIdNotFound, Thrift.TException);
Kraken.InvalidArticleSourceIdNotFound.prototype.name = 'InvalidArticleSourceIdNotFound';
Kraken.InvalidArticleSourceIdNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.errorCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ArticleSourceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Kraken.InvalidArticleSourceIdNotFound.prototype.write = function(output) {
  output.writeStructBegin('InvalidArticleSourceIdNotFound');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.STRING, 1);
    output.writeString(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.ArticleSourceId !== null && this.ArticleSourceId !== undefined) {
    output.writeFieldBegin('ArticleSourceId', Thrift.Type.STRING, 3);
    output.writeString(this.ArticleSourceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Kraken.ArchiveDailyIndex = module.exports.ArchiveDailyIndex = function(args) {
  this.ArticleSourceId = null;
  this.LocalDate = null;
  this.Status = null;
  this.SourceUrl = null;
  this.ImportedDocumentId = null;
  if (args) {
    if (args.ArticleSourceId !== undefined) {
      this.ArticleSourceId = args.ArticleSourceId;
    }
    if (args.LocalDate !== undefined) {
      this.LocalDate = args.LocalDate;
    }
    if (args.Status !== undefined) {
      this.Status = args.Status;
    }
    if (args.SourceUrl !== undefined) {
      this.SourceUrl = args.SourceUrl;
    }
    if (args.ImportedDocumentId !== undefined) {
      this.ImportedDocumentId = args.ImportedDocumentId;
    }
  }
};
Kraken.ArchiveDailyIndex.prototype = {};
Kraken.ArchiveDailyIndex.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ArticleSourceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.LocalDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.SourceUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ImportedDocumentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Kraken.ArchiveDailyIndex.prototype.write = function(output) {
  output.writeStructBegin('ArchiveDailyIndex');
  if (this.ArticleSourceId !== null && this.ArticleSourceId !== undefined) {
    output.writeFieldBegin('ArticleSourceId', Thrift.Type.STRING, 1);
    output.writeString(this.ArticleSourceId);
    output.writeFieldEnd();
  }
  if (this.LocalDate !== null && this.LocalDate !== undefined) {
    output.writeFieldBegin('LocalDate', Thrift.Type.STRING, 2);
    output.writeString(this.LocalDate);
    output.writeFieldEnd();
  }
  if (this.Status !== null && this.Status !== undefined) {
    output.writeFieldBegin('Status', Thrift.Type.STRING, 3);
    output.writeString(this.Status);
    output.writeFieldEnd();
  }
  if (this.SourceUrl !== null && this.SourceUrl !== undefined) {
    output.writeFieldBegin('SourceUrl', Thrift.Type.STRING, 4);
    output.writeString(this.SourceUrl);
    output.writeFieldEnd();
  }
  if (this.ImportedDocumentId !== null && this.ImportedDocumentId !== undefined) {
    output.writeFieldBegin('ImportedDocumentId', Thrift.Type.STRING, 5);
    output.writeString(this.ImportedDocumentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Kraken.GetArchiveDailyIndexRequest = module.exports.GetArchiveDailyIndexRequest = function(args) {
  this.ArticleSourceId = null;
  this.DateTimestamp = null;
  if (args) {
    if (args.ArticleSourceId !== undefined) {
      this.ArticleSourceId = args.ArticleSourceId;
    }
    if (args.DateTimestamp !== undefined) {
      this.DateTimestamp = args.DateTimestamp;
    }
  }
};
Kraken.GetArchiveDailyIndexRequest.prototype = {};
Kraken.GetArchiveDailyIndexRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ArticleSourceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.DateTimestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Kraken.GetArchiveDailyIndexRequest.prototype.write = function(output) {
  output.writeStructBegin('GetArchiveDailyIndexRequest');
  if (this.ArticleSourceId !== null && this.ArticleSourceId !== undefined) {
    output.writeFieldBegin('ArticleSourceId', Thrift.Type.STRING, 1);
    output.writeString(this.ArticleSourceId);
    output.writeFieldEnd();
  }
  if (this.DateTimestamp !== null && this.DateTimestamp !== undefined) {
    output.writeFieldBegin('DateTimestamp', Thrift.Type.STRING, 2);
    output.writeString(this.DateTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Kraken.GetArticleSourceRequest = module.exports.GetArticleSourceRequest = function(args) {
  this.ArticleSourceId = null;
  if (args) {
    if (args.ArticleSourceId !== undefined) {
      this.ArticleSourceId = args.ArticleSourceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ArticleSourceId is unset!');
    }
  }
};
Kraken.GetArticleSourceRequest.prototype = {};
Kraken.GetArticleSourceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ArticleSourceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Kraken.GetArticleSourceRequest.prototype.write = function(output) {
  output.writeStructBegin('GetArticleSourceRequest');
  if (this.ArticleSourceId !== null && this.ArticleSourceId !== undefined) {
    output.writeFieldBegin('ArticleSourceId', Thrift.Type.STRING, 1);
    output.writeString(this.ArticleSourceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.TYPE_DAILY_INDEX = 'ARCHIVE_DAILY_INDEX';
ttypes.TYPE_ARTICLE = 'ARTICLE';
ttypes.STATUS_NOT_FOUND = 'NOT_FOUND';
ttypes.STATUS_IMPORTED = 'IMPORTED';
ttypes.STATUS_READY = 'READY';
